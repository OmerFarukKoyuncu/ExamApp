@model AdminProductUpdateVM

@{
	ViewData["Title"] = @SharedLocalizer["Update", SharedLocalizer["Product"]];

	if (Model.SubjectIds == null)

	{

		Model.SubjectIds = new();

	}
}

<script>
	console.log('Initial Values:');
	console.log('Product Name:', '@Model.Name');
	console.log('Technical Unit:', '@Model.TechnicalUnitId');
	console.log('Subject IDs:', @Html.Raw(Json.Serialize(Model.SubjectIds)));
</script>

<div class="modal fade" id="updateProductModal" tabindex="-1" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered mw-1000px">
		<div class="modal-content">
			<div class="modal-header" id="kt_modal_create_subtopic_header">
				<h2 class="fw-bolder">@SharedLocalizer["Update", SharedLocalizer["Product"]]</h2>
				<div class="btn btn-icon btn-sm btn-active-icon-primary" data-kt-users-modal-action="close">
					<span class="svg-icon svg-icon-1">
						<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
							<rect opacity="0.5" x="6" y="17.3137" width="16" height="2" rx="1" transform="rotate(-45 6 17.3137)" fill="currentColor" />
							<rect x="7.41422" y="6" width="16" height="2" rx="1" transform="rotate(45 7.41422 6)" fill="currentColor" />
						</svg>
					</span>
				</div>
			</div>
			<div class="modal-body scroll-y mx-5 mx-xl-15 my-7">
				<form asp-area="Admin" asp-controller="Product" asp-action="Update" id="kt_modal_update_product_form" class="form" enctype="multipart/form-data">
					<div class="d-flex flex-column scroll-y me-n7 pe-7" id="kt_modal_create_subtopic_scroll" data-kt-scroll="true" data-kt-scroll-activate="{default: false, lg: true}" data-kt-scroll-max-height="auto" data-kt-scroll-dependencies="#kt_modal_add_user_header" data-kt-scroll-wrappers="#kt_modal_add_user_scroll" data-kt-scroll-offset="300px">
						<div class="row">
							<input type="hidden" asp-for="Id" />
							<div class="fv-row form-floating mb-7">
								<div class="fv-row form-floating mb-7">
									<input asp-for="Name" class="form-control form-control-solid mb-3 mb-lg-0" placeholder="@ViewLocalizer["Create_New"]" />
									<label asp-for="Name" class="fw-bold fs-6 mb-2">
										<span class="label-text">@Html.DisplayNameFor(m => m.Name)</span>
									</label>
								</div>
								<div class="fv-row form-floating mb-7">
									<select asp-for="TechnicalUnitId" asp-items="@ViewBag.TechnicalUnits" class="form-select form-select-sm form-select-solid">
										<option value="" disabled selected>@SharedLocalizer["Choose"]</option>
									</select>
									<label asp-for="TechnicalUnitId" class="fw-bold fs-6 mb-2">
										<span class="label-text">@Html.DisplayNameFor(m => m.TechnicalUnitId)</span>
									</label>
								</div>
								<div class="fv-row form-floating mb-7">
									<select asp-for="SubjectIds"
											asp-items="@ViewBag.Subjects"
											class="form-select form-select-lg form-select-solid"
											data-placeholder="@SharedLocalizer["Choose"]"
											data-control="select2"
											data-allow-clear="true"
											multiple="multiple">
										<option></option>
									</select>
									<label asp-for="SubjectIds" class="fw-bold fs-6 mb-2">
										<span class="label-text">@Html.DisplayNameFor(m => m.SubjectIds)</span>
									</label>
								</div>
								<div class="col-md-6">
									<!--begin::Input group-->
									<div class="row mb-7">
										<div class="fv-row mb-7">
											<!--begin::Label-->
											<label asp-for="IsActive" class="fw-bold fs-6 mb-5"></label>
											<!--end::Label-->
										</div>
										<div class="row mb-7">
											<div class="col">
												<!--begin::Genders-->
												<!--begin::Input row-->
												<div class="d-flex fv-row">
													<!--begin::Radio-->
													<div class="form-check form-check-custom form-check-solid">
														<!--begin::Input-->
														<input asp-for="IsActive" class="form-check-input me-3" type="radio" value="true" id="kt_modal_update_role_option_0" checked='checked' />
														<!--end::Input-->
														<!--begin::Label-->
														<label class="form-check-label" for="kt_modal_update_role_option_0">
															<div class="fw-bolder text-gray-800">@ViewLocalizer["Yes"]</div>
														</label>
														<!--end::Label-->
													</div>
													<!--end::Radio-->
												</div>
												<!--end::Input row-->
											</div>
											<div class="col">
												<!--begin::Input row-->
												<div class="d-flex fv-row">
													<!--begin::Radio-->
													<div class="form-check form-check-custom form-check-solid">
														<!--begin::Input-->
														<input asp-for="IsActive" class="form-check-input me-3" type="radio" value="false" id="kt_modal_update_role_option_1" />
														<!--end::Input-->
														<!--begin::Label-->
														<label class="form-check-label" for="kt_modal_update_role_option_1">
															<div class="fw-bolder text-gray-800">@ViewLocalizer["No"]</div>
														</label>
														<!--end::Label-->
													</div>
													<!--end::Radio-->
												</div>
												<!--end::Input row-->
												<!--end::Genders-->
											</div>
										</div>
									</div>
								</div>
							</div>
						</div>
						<div class="text-center pt-15">
							<button type="reset" class="btn btn-light me-3" data-kt-users-modal-action="cancel">@SharedLocalizer["Back_List"]</button>
							<button type="submit" class="btn btn-primary" data-kt-users-modal-action="submit">
								<span class="indicator-label">@SharedLocalizer["Save"]</span>
								<span class="indicator-progress">
									@SharedLocalizer["Please_Wait"]
									<span class="spinner-border spinner-border-sm align-middle ms-2"></span>
								</span>
							</button>
						</div>
					</div>
				</form>
			</div>
		</div>
	</div>
</div>

<script>
	document.addEventListener("DOMContentLoaded", function () {
		const updateModal = document.querySelector('#updateProductModal');
		if (!updateModal) return; // Sadece güncelleme modalı varsa çalış

		const inputs = updateModal.querySelectorAll('input[type="text"], input[type="email"]');
		const subjectSelect = updateModal.querySelector('#SubjectIds');
		const technicalUnitSelect = updateModal.querySelector('#TechnicalUnitId');

		// Yıldız kaldırma fonksiyonu
		function removeRequiredStar(element) {
			const parentDiv = element.closest('.fv-row');
			if (parentDiv) {
				const label = parentDiv.querySelector('label');
				if (label) {
					// Sadece yıldız elementlerini bul ve kaldır
					const stars = label.querySelectorAll('.required-star');
					stars.forEach(star => star.remove());
				}
			}
		}

		// Yıldız ekleme fonksiyonu
		function addRequiredStar(element) {
			const parentDiv = element.closest('.fv-row');
			if (parentDiv) {
				const label = parentDiv.querySelector('label');
				if (label) {
					// Önce varolan yıldızları temizleyelim
					removeRequiredStar(element);

					// Yeni yıldız ekleyelim
					const star = document.createElement('span');
					star.className = 'required-star text-danger ms-1';
					star.textContent = '*';
					label.appendChild(star);
				}
			}
		}

		// Input değişikliklerini dinle
		inputs.forEach(input => {
			input.addEventListener('input', function () {
				if (!this.value || this.value.trim() === '') {
					addRequiredStar(this);
				} else {
					removeRequiredStar(this);
				}
			});
		});

		// Select elementleri için yıldız kontrolü
		if (subjectSelect) {
			$(subjectSelect).on('change', function () {
				const selectedValues = $(this).val();
				if (!selectedValues || selectedValues.length === 0) {
					addRequiredStar(this);
				} else {
					removeRequiredStar(this);
				}
			});
		}

		if (technicalUnitSelect) {
			technicalUnitSelect.addEventListener('change', function () {
				if (!this.value || this.value === '') {
					addRequiredStar(this);
				} else {
					removeRequiredStar(this);
				}
			});
		}

		// Form submit kontrolü
		updateModal.querySelector('#kt_modal_update_product_form').addEventListener('submit', function (e) {
			let hasEmptyFields = false;

			// Text inputları kontrolü
			inputs.forEach(input => {
				if (!input.value || input.value.trim() === '') {
					addRequiredStar(input);
					hasEmptyFields = true;
				}
			});

			// Select elementleri kontrolü
			if (subjectSelect) {
				const selectedSubjects = $(subjectSelect).val();
				if (!selectedSubjects || selectedSubjects.length === 0) {
					addRequiredStar(subjectSelect);
					hasEmptyFields = true;
				}
			}

			if (technicalUnitSelect && (!technicalUnitSelect.value || technicalUnitSelect.value === '')) {
				addRequiredStar(technicalUnitSelect);
				hasEmptyFields = true;
			}

			if (hasEmptyFields) {
				e.preventDefault();
				Swal.fire({
					title: 'Uyarı!',
					text: 'Lütfen zorunlu alanları doldurunuz.',
					icon: 'warning',
					confirmButtonText: 'Tamam'
				});
			}
		});
	});
</script>